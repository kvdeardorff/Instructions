{"version":3,"sources":["types/Actions/index.ts","types/Albums/index.ts","types/Apis/index.ts","types/Bot/index.ts","types/Events/index.ts","types/Instructions/index.ts","types/Login/index.ts","types/Threads/index.ts","types/types.ts","services/InstructionsContext/index.tsx","components/TopBar/index.tsx","components/Markdown/index.tsx","services/Spacing/index.ts","services/UseResize/index.ts","components/Instructions/components/Instruction/index.tsx","components/User/index.tsx","services/GetLineHeight/index.ts","components/Instructions/components/Threads/index.tsx","components/Instructions/components/RegexTriggerDisplay/index.tsx","components/Instructions/components/TriggerInstruction/index.tsx","components/Instructions/components/AlbumActionInstruction/index.tsx","components/Instructions/components/ActionsInstructions/index.tsx","services/JSONParseRegExReviver/index.ts","components/Instructions/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionsActionTypes","AlbumsActionTypes","ImageReviewStatus","APITypes","ApiActionTypes","BotActionTypes","BotFetchKeys","EventsActionTypes","LogEventTypes","InstructionsActionTypes","LoginActionTypes","ThreadsActionTypes","initialState","actions","albums","bot","avatar","undefined","id","name","title","profile","regDate","botName","done","fetching","failed","general","threads","dispatch","action","reducer","state","type","instructions","console","log","InstructionsContext","createContext","InstructionsProvider","children","testState","testDispatch","useReducer","value","Provider","Title","useContext","Header","size","content","InstructionsLink","href","target","rel","menuItems","map","element","index","Menu","Item","key","TopBar","color","inverted","MyMarkdown","props","maxWidth","imageNodes","Map","renderers","image","alt","src","style","allowNodes","node","position","set","JSON","stringify","start","linkTarget","rawSourcePos","spacing","marginTop","marginBottom","useResize","myRef","getWidth","useCallback","current","offsetWidth","useState","width","setWidth","useEffect","handleResize","window","addEventListener","removeEventListener","Instruction","input","addChildren","forceOpen","open","setOpen","divRef","React","useRef","markdownChild","onClick","e","escapeHtml","source","inputName","split","replace","trim","child","preventDefault","as","forEach","push","toString","cursor","ref","Segment","User","Image","getLineHeight","root","document","getElementById","text","createElement","innerHTML","appendChild","lineHeight","parseInt","getComputedStyle","fontSize","removeChild","Threads","maxHeight","zero","length","singular","overflow","thread","link","RegexTriggerDisplay","album","triggers","filter","trigger","RegExp","Label","Trigger","TriggerInstruction","example","hasRegExp","some","el","AlbumTriggersInstruction","description","hash","hasRegex","stringChildren","AlbumActionInstruction","actionInstruction","ActionsInstructions","albumActions","notAlbumActions","reviver","test","indexOf","m","match","regExp","err","instructionsJson","require","Instructions","setInstructions","parse","Grid","Column","Container","Loader","active","App","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","rootElement","hasChildNodes","hydrate","StrictMode","render","URL","process","origin","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fdc5e920.chunk.js","sourcesContent":["export type Trigger = string | RegExp;\n\nexport interface DisplayAction {\n    active: boolean;\n    instructions?: string;\n    name: string;\n    triggers: Trigger[];\n}\n\nexport enum ActionsActionTypes {\n    currentAction = 'currentAction',\n    fetchAttempt = 'fetchAttempt',\n    failed = 'failed',\n    setActions = 'setActions',\n    setAction = 'setAction',\n    setActive = 'setActive',\n}\n\nexport type ActionsAction =\n    //sets the current action that the user is viewing\n    | { type: ActionsActionTypes.currentAction; key: string }\n\n    //sets the entire actions object, retrieved from API\n    | {\n          type: ActionsActionTypes.setActions;\n          actions: { [key: string]: DisplayAction };\n      }\n    //fetching failed\n    | { type: ActionsActionTypes.failed }\n\n    //currently fetching\n    | { type: ActionsActionTypes.fetchAttempt }\n\n    //set the value of an action\n    | { type: ActionsActionTypes.setAction; key: string; value: DisplayAction }\n\n    //set the active value of an action\n    //refer to action as 'key'\n    | { type: ActionsActionTypes.setActive; key: string; value: boolean };\n\n//The Dispatch function\ninterface ActionsDispatch {\n    dispatch: (action: ActionsAction) => void;\n}\n\nexport interface ActionsType {\n    action?: string;\n    actions: { [key: string]: DisplayAction };\n    fetching: boolean;\n    failed: boolean;\n}\n\n//a union type. The Albums state will have a Stats object for any given key\n//except dispatch will return the LoggedInDispatch function\nexport type ActionsState = ActionsType & ActionsDispatch;\n","import { SAUser } from '../types';\n\nexport interface Album {\n    description: string;\n    hash: string;\n    status: boolean;\n}\n\nexport interface Albums {\n    [key: string]: Album;\n}\n\nexport enum AlbumsActionTypes {\n    accept = 'accept',\n    addExistingAlbum = 'addExistingAlbum',\n    createNewAlbum = 'createNewAlbum',\n    delete = 'delete',\n    deleteAlbum = 'deleteAlbum',\n    fetchAlbumsAttempt = 'fetchAlbumsAttempt',\n    fetchAlbumsFailure = 'fetchAlbumsFailure',\n    fetchAlbumsSuccess = 'fetchAlbumsSuccess',\n    pending = 'pending',\n    reject = 'reject',\n    report = 'report',\n    removeImage = 'removeImage',\n    setAlbum = 'setAlbum',\n    setDescription = 'setDescription',\n    setFetchingImageQueue = 'setFetchingImageQueue',\n    setHash = 'setHash',\n    setImageQueue = 'setImageQueue',\n    setName = 'setName',\n    setReview = 'setReview',\n    setStatus = 'setStatus',\n}\n\nexport type AlbumsAction =\n    //accepts adds an image to an album\n    | { type: AlbumsActionTypes.accept; submittedAt: string }\n\n    //adds an exisiting imgur album\n    | {\n          type: AlbumsActionTypes.addExistingAlbum;\n          album?: string;\n          description?: string;\n          hash: string;\n          status?: boolean;\n      }\n\n    //create a new album. user must provide the hash\n    | {\n          type: AlbumsActionTypes.createNewAlbum;\n          album: string;\n          description?: string;\n          hash?: string;\n      }\n\n    //deletes an image from the queue\n    | { type: AlbumsActionTypes.delete; submittedAt: string }\n\n    //delete an album. From the bot? or from imgur altogether?\n    | { type: AlbumsActionTypes.deleteAlbum; album: string }\n\n    //trying to fetch the albums\n    | { type: AlbumsActionTypes.fetchAlbumsAttempt }\n\n    //failed to fetch the albums\n    | { type: AlbumsActionTypes.fetchAlbumsFailure }\n\n    //got the albums from the api\n    | {\n          type: AlbumsActionTypes.fetchAlbumsSuccess;\n          albums: Albums;\n          imageQueue?: ReviewImage[];\n      }\n\n    //sets the status of an image to pending\n    | { type: AlbumsActionTypes.pending; submittedAt: string }\n\n    //reject adding an image to an album\n    | { type: AlbumsActionTypes.reject; submittedAt: string }\n\n    //remove an image from an album\n    | { type: AlbumsActionTypes.removeImage }\n\n    //the image is obscene or illegal\n    | { type: AlbumsActionTypes.report }\n\n    //sets the current album to string or undefined\n    | { type: AlbumsActionTypes.setAlbum; album?: string }\n\n    //sets the description of an album\n    | {\n          type: AlbumsActionTypes.setDescription;\n          album: string;\n          value: string;\n      }\n\n    //sets the fetching boolean\n    | {\n          type: AlbumsActionTypes.setFetchingImageQueue;\n          fetching: boolean;\n      }\n\n    //sets the image queue array\n    | {\n          type: AlbumsActionTypes.setImageQueue;\n          imageQueue: ReviewImage[];\n      }\n    //sets the name of the album\n    | {\n          type: AlbumsActionTypes.setName;\n          album: string;\n          value: string;\n      }\n    //turns image review on or off\n    | {\n          type: AlbumsActionTypes.setReview;\n          review?: boolean;\n      }\n\n    //sets the album active status\n    //if true, album is available for posters to invoke or request image addition\n    | {\n          type: AlbumsActionTypes.setStatus;\n          album: string;\n          value: boolean;\n      }\n\n    //sets the hash of an album\n    | { type: AlbumsActionTypes.setHash; album: string; value: string };\n\n//The Dispatch function\ninterface AlbumsDispatch {\n    dispatch: (action: AlbumsAction) => void;\n}\n\nexport interface AlbumsType {\n    album?: string;\n    albums?: Albums;\n    imageQueue?: ReviewImage[];\n    fetching: boolean;\n    hasFailed: boolean;\n    review: boolean;\n}\n\n//a union type. The Albums state will have a Stats object for any given key\n//except dispatch will return the LoggedInDispatch function\nexport type AlbumsState = AlbumsType & AlbumsDispatch;\n\n//the possible states of an image submitted to be added to an album\nexport enum ImageReviewStatus {\n    //not reviewed yet\n    pending = 'PENDING',\n\n    //accepted into the album\n    accepted = 'ACCEPTED',\n\n    //rejected from the album\n    rejected = 'REJECTED',\n\n    //image is obscene or illegal\n    reported = 'REPORTED',\n}\n\nexport interface ReviewImage {\n    album: string;\n    image: string;\n    submittedAt: string;\n    submittedBy: SAUser;\n    status: ImageReviewStatus;\n}\n","enum APITypes {\n    accessToken = 'accessToken',\n    access_token = 'access_token',\n    access_token_secret = 'access_token_secret',\n    bearerToken = 'bearerToken',\n    clientId = 'clientId',\n    clientSecret = 'clientSecret',\n    consumerKey = 'consumerKey',\n    consumerSecret = 'consumerSecret',\n}\n\nexport type Api = string | { [A in APITypes]?: any };\n\nexport interface Apis {\n    [key: string]: Api;\n}\n\nexport enum ApiActionTypes {\n    failed = 'failed',\n    fetching = 'fetching',\n    setCurrent = 'setCurrent',\n    setApis = 'setApis',\n    setApi = 'setApi',\n}\n\nexport type ApiAction =\n    //failed to fetch an api\n    | { type: ApiActionTypes.failed; api: string }\n\n    //getting an api\n    | { type: ApiActionTypes.fetching; api: string }\n\n    //setting the currently viewed api\n    | { type: ApiActionTypes.setCurrent; current: string }\n\n    //loading all apis\n    | { type: ApiActionTypes.setApis; apis: Apis }\n\n    //loading a single api\n    | { type: ApiActionTypes.setApi; api: string; value: Api };\n\n//The Dispatch function\ninterface ApiDispatch {\n    dispatch: React.Dispatch<ApiAction>;\n}\n\ninterface ApiType {\n    apis: Apis;\n    current: string;\n    failed: string[];\n    fetching: string[];\n}\n//a union type. The LoggedIn state will have a Stats object for any given key\n//except dispatch will return the LoggedInDispatch function\nexport type ApiState = ApiType & ApiDispatch;\n","import { Apis } from '../types';\n\n//the types of action that the reducer in BotContext will handle\nexport enum BotActionTypes {\n    decreaseInterval = 'decreaseInterval',\n    increaseInterval = 'increaseInterval',\n    fetchAttempt = 'fetchAttempt',\n    fetchFailure = 'fetchFailure',\n    fetchSuccess = 'fetchSuccess',\n    runOnce = 'runOnce',\n    setBotName = 'setBotName',\n    setCookies = 'setCookies',\n    setInterval = 'setInterval',\n    setRunning = 'setRunning',\n    setTimer = 'setTimer',\n    setValueAttempt = 'setValueAttempt',\n    setValueFailure = 'setValueFailure',\n    setValueSuccess = 'setValueSuccess',\n    start = 'start',\n    stop = 'stop',\n    testCookies = 'testCookies',\n}\n\nexport enum BotFetchKeys {\n    APIs = 'APIs',\n    settings = 'settings',\n}\nexport type BotAction =\n    //decreases the run interval\n    | { type: BotActionTypes.decreaseInterval }\n\n    //increases the run interval\n    | { type: BotActionTypes.increaseInterval }\n\n    //attempting to fetch something from the api\n    | { type: BotActionTypes.fetchAttempt; key: BotFetchKeys }\n\n    //fetching failed\n    | { type: BotActionTypes.fetchFailure; key: BotFetchKeys }\n\n    //load APIs received from API into context\n    | {\n          type: BotActionTypes.fetchSuccess;\n          key: BotFetchKeys;\n          content: Apis | FrontEndBotSettings;\n      }\n\n    //runs the bot once with current settings, then stops the bot\n    | { type: BotActionTypes.runOnce }\n\n    //sets the bot name\n    | { type: BotActionTypes.setBotName; botName: string }\n\n    //sets the Forum Cookies\n    | { type: BotActionTypes.setCookies; cookies: Cookies }\n\n    //sets if the bot is currently running or not\n    | { type: BotActionTypes.setRunning; running: boolean }\n\n    //sets the timer\n    | { type: BotActionTypes.setTimer; timer: Timer }\n\n    //starts the bot running at current intervals\n    | { type: BotActionTypes.start }\n\n    //stops the bot from running if it is already running\n    | { type: BotActionTypes.stop }\n\n    //sets the interval in minutes at which the bot runs\n    | { type: BotActionTypes.setInterval; interval: number }\n\n    //sets cookies.testing to true\n    | { type: BotActionTypes.testCookies };\n\n//The Dispatch function\ninterface BotDispatch {\n    dispatch: (action: BotAction) => void;\n}\n\nexport interface Cookies {\n    exist?: boolean;\n    refreshing: boolean;\n    testing: boolean;\n    work?: boolean;\n}\n\nexport interface FrontEndBotSettings {\n    //the name that posters use to get the bot's attention\n    botName: string;\n\n    cookies: Cookies;\n\n    //how often the bot runs in minutes, must be > 1\n    interval: number;\n\n    //If the bot is set to run every interval or not\n    on: boolean;\n\n    //if the bot is currently running or not\n    running: boolean;\n}\n\nexport interface Timer {\n    minutes: number;\n    seconds: number;\n}\n\ninterface BotType {\n    api: string;\n    APIs?: Apis;\n    fetching: string[];\n    hasFailed: string[];\n    settings?: FrontEndBotSettings;\n    timer: Timer;\n}\n\n//a union type. The LoggedIn state will have a Stats object for any given key\n//except dispatch will return the LoggedInDispatch function\nexport type BotState = BotType & BotDispatch;\n","export enum EventsActionTypes {\n    addEvent = 'addEvent',\n    failed = 'failed',\n    setListening = 'setListening',\n}\n\nexport type EventsAction =\n    //received event from event source. add it to array of LogEvents\n    | {\n          type: EventsActionTypes.addEvent;\n          event: LogEvent | LogEvent[];\n      }\n\n    //failed to get event source\n    | { type: EventsActionTypes.failed }\n\n    //already listening to event source\n    | { type: EventsActionTypes.setListening; listening: boolean };\n\nexport interface EventsDispatch {\n    dispatch: React.Dispatch<EventsAction>;\n}\n\ninterface EventsType {\n    events: LogEvent[];\n    failed: boolean;\n    listening: boolean;\n}\n\nexport type EventsState = EventsType & EventsDispatch;\n\nexport type LogEvent = {\n    time: string;\n    text?: string;\n    data?: object;\n};\n\n//the types of log events\nexport enum LogEventTypes {\n    apiMessage = 'apiMessage',\n    array = 'array',\n    botStatus = 'botStatus',\n    error = 'error',\n    instructions = 'instructions',\n    timeLeft = 'timeLeft',\n    link = 'link',\n    post = 'post',\n    setting = 'setting',\n    threads = 'threads',\n    text = 'text',\n}\n","import { Trigger, SAUser } from '../types';\nimport { FrontEndThread } from '../Threads';\n\nexport interface ActionInstruction {\n    albums: boolean;\n    example?: string;\n    instructions?: string;\n    key: string;\n    name: string;\n    triggers: Trigger[];\n}\n\nexport interface AlbumInstruction {\n    album: string;\n    description?: string;\n    hash?: string;\n}\n\nexport enum InstructionsActionTypes {\n    done = 'done',\n    failed = 'failed',\n    fetchAttempt = 'fetchAttempt',\n    setBotName = 'setBotName',\n    setInstructions = 'setInstructions',\n}\n\nexport type InstructionsAction =\n    //fetching done\n    | { type: InstructionsActionTypes.done }\n\n    //fetching failed\n    | { type: InstructionsActionTypes.failed }\n\n    //currently fetching\n    | { type: InstructionsActionTypes.fetchAttempt }\n\n    //set the botName\n    | { type: InstructionsActionTypes.setBotName; botName: string }\n\n    //set the instruction state, except for botName\n    | {\n          type: InstructionsActionTypes.setInstructions;\n          instructions: {\n              actions: ActionInstruction[];\n              albums: AlbumInstruction[];\n              bot: SAUser;\n              botName: string;\n              general: string;\n              threads: FrontEndThread[];\n          };\n      };\n\n//The Dispatch function\ninterface InstructionsDispatch {\n    dispatch: (action: InstructionsAction) => void;\n}\n\nexport interface InstructionsType {\n    actions: ActionInstruction[];\n    albums: AlbumInstruction[];\n    bot: SAUser;\n    botName: string;\n    done: boolean;\n    fetching: boolean;\n    failed: boolean;\n    general: string;\n    threads: FrontEndThread[];\n}\n\n//a union type\nexport type InstructionsState = InstructionsType & InstructionsDispatch;\n","//the types of action that the reducer in BotContext will handle\nexport enum LoginActionTypes {\n    attempt = 'attempt',\n    failure = 'failure',\n    logout = 'logout',\n    openModal = 'openModal',\n    success = 'success',\n}\n\nexport type LoginAction =\n    //attempting to login, waiting for response\n    | { type: LoginActionTypes.attempt }\n\n    //login attempt failed\n    | { type: LoginActionTypes.failure }\n\n    //user logs out\n    | { type: LoginActionTypes.logout }\n\n    //the login modal is open or not\n    | { type: LoginActionTypes.openModal }\n\n    //login attempt succeeded\n    //token has been stored in localStorage\n    | { type: LoginActionTypes.success };\n\n//The Dispatch function\ninterface LoginDispatch {\n    dispatch: React.Dispatch<LoginAction>;\n}\n\ninterface LoginType {\n    isLoggedIn: boolean;\n    loggingIn: boolean;\n    modalOpen: boolean;\n}\n//a union type. The LoggedIn state will have a Stats object for any given key\n//except dispatch will return the LoggedInDispatch function\nexport type LoginState = LoginType & LoginDispatch;\n","interface ThreadLimits {\n    startPage: number;\n    startPost: number;\n    stopPage: number;\n    stopPost: number;\n}\n\n//a thread that the bot monitors\nexport interface FrontEndThread {\n    //active is true if it was bookmarked\n    //the last time we got bookmarked threads from the forums page\n    bookmarked: boolean;\n\n    //     lastScannedPage?: number;\n    //     lastScannedPost?: number;\n    //     newPosts?: number;\n\n    //optional limits on scanning the thread\n    //start at X page, post, stop at Y page, post\n    limit?: ThreadLimits;\n\n    //a link to the thread\n    link: string;\n\n    //human readable name\n    //designated by you, the person running the bot\n    //goes in the logs\n    name?: string;\n\n    //title from the forums\n    //this is often changed\n    title?: string;\n\n    //the unique identifying number of the thread\n    threadId: number;\n\n    pages: number;\n\n    unreadPosts: number;\n}\n\nexport enum ThreadsActionTypes {\n    addThread = 'addThread',\n    currentThread = 'currentThread',\n    failed = 'failed',\n    fetchAttempt = 'fetchAttempt',\n    setBookmarked = 'setBookmarked',\n    setName = 'setName',\n    setThreads = 'setThreads',\n}\n\nexport type ThreadsAction =\n    //add thread or array of threads  to array of threads\n    | {\n          type: ThreadsActionTypes.addThread;\n          thread: FrontEndThread | FrontEndThread[];\n      }\n\n    //set the current thread\n    | { type: ThreadsActionTypes.currentThread; threadId: number }\n\n    //failed to get threads from API\n    | { type: ThreadsActionTypes.failed }\n\n    //fetching threads from API\n    | { type: ThreadsActionTypes.fetchAttempt }\n\n    //set if a thread is bookmarked\n    | {\n          type: ThreadsActionTypes.setBookmarked;\n          threadId: number;\n          value: boolean;\n      }\n\n    //set the name of a thread\n    | { type: ThreadsActionTypes.setName; threadId: number; value?: string }\n\n    //set the whole array of threads\n    | { type: ThreadsActionTypes.setThreads; threads: FrontEndThread[] };\n\nexport interface ThreadsDispatch {\n    dispatch: React.Dispatch<ThreadsAction>;\n}\n\ninterface ThreadsType {\n    thread: number;\n    threads?: FrontEndThread[];\n    failed: boolean;\n    fetching: boolean;\n}\n\nexport type ThreadsState = ThreadsType & ThreadsDispatch;\n","export interface Creds {\n    username: string;\n    password: string;\n}\n\nexport interface KeyStringInterface {\n    [key: string]: any;\n}\n\nexport interface SAUser {\n    avatar?: string;\n    id: number;\n    name: string;\n    title?: string;\n    profile: string;\n    regDate: string;\n}\n\nexport const dummySAUser: SAUser = {\n    avatar: undefined,\n    id: 0,\n    name: '',\n    title: undefined,\n    profile: '',\n    regDate: '',\n};\n\nexport interface Post {\n    //the name of the user that wrote the post\n    author: SAUser;\n\n    //the body of the post, without other quoted posts inside it\n    body: string;\n\n    //the date the post was made\n    date: Date;\n\n    //the unique postId number\n    id: number;\n\n    //the img.src property\n    image?: string;\n\n    //link to the post\n    link: string;\n}\n\nexport interface Instruction extends Post {\n    //the instruction that the bot received\n    instruction: string;\n\n    //the link to the post that had the instruction\n    link: string;\n}\n\nexport * from './Actions';\nexport * from './Albums';\nexport * from './Apis';\nexport * from './Bot';\nexport * from './Events';\nexport * from './Instructions';\nexport * from './Login';\nexport * from './Threads';\n","import React, { createContext, useReducer } from 'react';\nimport {\n    InstructionsState,\n    InstructionsAction,\n    dummySAUser,\n} from '../../types/types';\n\nconst initialState = {\n    actions: [],\n    albums: [],\n    bot: dummySAUser,\n    botName: '',\n    done: false,\n    fetching: false,\n    failed: false,\n    general: '',\n    threads: [],\n    dispatch: (action: InstructionsAction) => undefined,\n} as InstructionsState;\n\n// }\n\nlet reducer = (state: InstructionsState, action: InstructionsAction) => {\n    switch (action.type) {\n        case 'done': {\n            return {\n                ...state,\n                done: true,\n                fetching: false,\n            };\n        }\n        case 'failed': {\n            return {\n                ...state,\n                actions: [],\n                albums: [],\n                done: true,\n                fetching: false,\n                failed: true,\n                general: '',\n            };\n        }\n        // setInstructions = 'setInstructions',\n        case 'fetchAttempt': {\n            return {\n                ...state,\n                fetching: true,\n            };\n        }\n        case 'setBotName': {\n            const { botName } = action;\n            return {\n                ...state,\n                botName,\n            };\n        }\n        case 'setInstructions': {\n            const { instructions } = action;\n            const {\n                actions,\n                albums,\n                bot,\n                botName,\n                general,\n                threads,\n            } = instructions;\n            console.log('set instructions here');\n            return {\n                ...state,\n                failed: false,\n                fetching: false,\n                actions,\n                albums,\n                bot,\n                botName,\n                general,\n                threads,\n            };\n        }\n        default: {\n            console.log(`InstructionsContext default`, action);\n            //throw new Error();\n            return state;\n        }\n    }\n};\n\nconst InstructionsContext = createContext(initialState);\n\n//the Props that the InstructionsProvider will accept\ntype InstructionsProps = {\n    //You can put react components inside of the Provider component\n    children: React.ReactNode;\n\n    //We might want to pass a state into the CardProvider for testing purposes\n    testState?: InstructionsState;\n\n    testDispatch?: (args: any) => void;\n};\n\nconst InstructionsProvider = ({\n    children,\n    testState,\n    testDispatch,\n}: InstructionsProps) => {\n    //useReducer returns an array containing the state at [0]\n    //and the dispatch method at [1]\n    //use array destructuring to get state and dispatch\n    const [state, dispatch] = useReducer(\n        reducer,\n        testState ? testState : initialState\n    );\n\n    //add dispatch to value object and cast to LoggedInState\n    const value = {\n        ...state,\n        dispatch,\n    } as InstructionsState;\n\n    return (\n        <InstructionsContext.Provider value={value}>\n            {children}\n        </InstructionsContext.Provider>\n    );\n};\n\nexport { InstructionsContext, InstructionsProvider };\n","import React, { useContext } from 'react';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { InstructionsContext } from '../../services/InstructionsContext';\n\nconst Title = () => {\n    const { botName } = useContext(InstructionsContext);\n\n    return <Header size=\"large\" content={`${botName}, an SA Forums Bot`} />;\n};\n\nconst InstructionsLink = () => (\n    <a\n        href={'https://jacobwicks.github.io/2020/07/01/forums-posting-bot.html'}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n    >\n        How to run your own forums bot\n    </a>\n);\n\nconst menuItems = [<Title />, <InstructionsLink />].map((element, index) => (\n    <Menu.Item key={index}>{element}</Menu.Item>\n));\n\nconst TopBar = () => <Menu children={menuItems} color=\"green\" inverted />;\n\nexport default TopBar;\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown/with-html';\n\nconst MyMarkdown = (props: any) => {\n    //the maximum width of an image in the markdown\n    const maxWidth = props?.maxWidth;\n\n    const imageNodes = new Map();\n    const nodeKey = (position: any) => JSON.stringify(position.start); // or use your own hash function\n\n    const allowNodes = (node: any) => {\n        if (node.type === 'image') imageNodes.set(nodeKey(node.position), node);\n        return true;\n    };\n\n    //ReactMarkdown accepts custom renderers\n    const renderers = {\n        //This custom renderer changes how images are rendered\n        //we use it to constrain the max width of an image to its container\n        image: ({ alt, src, title }: { alt: any; src: any; title: any }) => (\n            <img alt={alt} src={src} title={title} style={{ maxWidth }} />\n        ),\n    };\n\n    return (\n        <ReactMarkdown\n            {...props}\n            allowNodes={allowNodes}\n            linkTarget={'_blank'}\n            renderers={renderers}\n            rawSourcePos\n        />\n    );\n};\n\nexport default MyMarkdown;\n","export const spacing = { marginTop: 10, marginBottom: 10 };\n","import { useCallback, useEffect, useState } from 'react';\n\nconst useResize = (myRef: any) => {\n    const getWidth = useCallback(() => myRef?.current?.offsetWidth, [myRef]);\n\n    const [width, setWidth] = useState<number | undefined>(undefined);\n\n    useEffect(() => {\n        const handleResize = () => {\n            setWidth(getWidth());\n        };\n\n        if (myRef.current) {\n            setWidth(getWidth());\n        }\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [getWidth, myRef]);\n\n    return width && width > 25 ? width - 25 : width;\n};\n\nexport default useResize;\n","import React, { useState } from 'react';\nimport { Segment, Header } from 'semantic-ui-react';\nimport ReactMarkdown from '../../../Markdown';\nimport { spacing } from '../../../../services/Spacing';\nimport useResize from '../../../../services/UseResize';\n\nexport const Instruction = ({\n    input,\n    name,\n    addChildren,\n    forceOpen,\n}: {\n    forceOpen?: boolean;\n    input: string;\n    name: string;\n    addChildren?: JSX.Element[];\n}) => {\n    const [open, setOpen] = useState(!!forceOpen);\n    const divRef = React.useRef<HTMLDivElement>(null);\n    const maxWidth = useResize(divRef);\n\n    const markdownChild = (\n        <div onClick={(e) => !forceOpen && setOpen(false)} key=\"mdchild\">\n            <ReactMarkdown\n                key=\"markdown\"\n                escapeHtml={false}\n                source={input}\n                maxWidth={maxWidth}\n            />\n        </div>\n    );\n\n    const inputName = input.split(/\\r?\\n/)[0].replace('#', '').trim();\n\n    const child = (\n        <div\n            key=\"child\"\n            onClick={(e) => {\n                e.preventDefault();\n                setOpen(true);\n            }}\n        >\n            <Header as=\"h3\">{inputName ? inputName : name}</Header>\n        </div>\n    );\n\n    const children = [open ? markdownChild : child];\n\n    if (open) {\n        addChildren?.forEach((child, index) =>\n            children.push({ ...child, key: index.toString() })\n        );\n    }\n\n    const style = forceOpen ? spacing : { ...spacing, cursor: 'pointer' };\n    return (\n        <div ref={divRef} style={style}>\n            <Segment children={children} />\n        </div>\n    );\n};\n\nexport default Instruction;\n","import React from 'react';\nimport { Header, Image } from 'semantic-ui-react';\nimport { SAUser } from '../../types/types';\n\nconst User = ({ avatar, name, profile, regDate, title }: SAUser) => (\n    <div>\n        <Header>\n            <a href={profile} target=\"_blank\" rel=\"noopener noreferrer\">\n                {name}\n            </a>\n        </Header>\n        {regDate}\n        <br />\n        <br />\n        {avatar && <Image src={avatar} />}\n        {title}\n    </div>\n);\n\nexport default User;\n","const getLineHeight = () => {\n    //to get the line height\n    const root = document.getElementById('root');\n    const text = document.createElement('span');\n    text.innerHTML = 'Hello';\n    //add an element containing some text\n    root?.appendChild(text);\n\n    //find the height\n    const lineHeight = parseInt(window.getComputedStyle(text).fontSize, 10);\n    //remove the element\n    root?.removeChild(text);\n    return lineHeight;\n};\n\nexport default getLineHeight;\n","import React, { useContext } from 'react';\nimport { Header, Segment } from 'semantic-ui-react';\nimport { InstructionsContext } from '../../../../services/InstructionsContext';\nimport getLineHeight from '../../../../services/GetLineHeight';\n\nconst Threads = () => {\n    const { botName, threads } = useContext(InstructionsContext);\n    const lineHeight = getLineHeight();\n\n    const lines = 5;\n\n    const maxHeight = lineHeight ? (lines + 1) * lineHeight : 100;\n\n    const zero = !threads.length;\n    const singular = threads.length === 1;\n    return (\n        <Segment>\n            <Header as=\"h2\">\n                {botName} is currently {zero ? 'not ' : ''}watching{' '}\n                {zero ? 'any ' : threads.length} thread{singular ? '' : 's'}\n            </Header>\n            <div style={{ maxHeight, overflow: 'auto' }}>\n                {threads.map((thread, index) => (\n                    <div key={index}>\n                        <a\n                            href={thread.link}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {thread.title}\n                        </a>\n                    </div>\n                ))}\n            </div>\n        </Segment>\n    );\n};\n\nexport default Threads;\n","import React from 'react';\nimport ReactMarkdown from '../../../Markdown';\nimport { Segment, Header, Label } from 'semantic-ui-react';\nimport { Trigger } from '../../../../types/types';\nimport { spacing } from '../../../../services/Spacing';\nimport useResize from '../../../../services/UseResize';\n\nexport const RegexTriggerDisplay = ({\n    album,\n    input,\n    triggers,\n}: {\n    album?: string;\n    input?: string;\n    triggers: Trigger[];\n}) => {\n    const divRef = React.useRef<HTMLDivElement>(null);\n    const maxWidth = useResize(divRef);\n\n    if (album) {\n        input = input?.replace(/\\${album}/g, album);\n    }\n\n    return (\n        <Segment>\n            {!!input?.length ? (\n                <div ref={divRef}>\n                    <ReactMarkdown\n                        key=\"markdown\"\n                        escapeHtml={false}\n                        source={input}\n                        maxWidth={maxWidth}\n                    />{' '}\n                </div>\n            ) : (\n                <>\n                    <Header as=\"h4\">\n                        No example given to match regular expression trigger\n                    </Header>\n                    {triggers\n                        .filter((trigger) => trigger instanceof RegExp)\n                        .map((trigger, index) => (\n                            <div key={index} style={spacing}>\n                                <Label color=\"blue\">RegExp</Label>{' '}\n                                {trigger.toString()}\n                            </div>\n                        ))}\n                </>\n            )}\n        </Segment>\n    );\n};\n\nexport default RegexTriggerDisplay;\n","import React, { useContext } from 'react';\nimport { spacing } from '../../../../services/Spacing';\nimport { Segment, Header } from 'semantic-ui-react';\nimport { Trigger as TriggerType } from '../../../../types/types';\nimport RegexTriggerDisplay from '../RegexTriggerDisplay';\nimport { InstructionsContext } from '../../../../services/InstructionsContext';\n\nconst Trigger = ({ trigger }: { trigger: TriggerType }) => {\n    const { botName } = useContext(InstructionsContext);\n    return (\n        <Segment>\n            {botName} {trigger.toString()}\n        </Segment>\n    );\n};\n\nconst TriggerInstruction = ({\n    example,\n    triggers,\n}: {\n    example?: string;\n    triggers: TriggerType[];\n}) => {\n    const hasRegExp = triggers.some((el) => el instanceof RegExp);\n\n    return !!triggers.length ? (\n        <Segment>\n            <Header as=\"h3\">How to trigger this action</Header>\n            <div style={spacing}>\n                {triggers.map(\n                    (trigger, index) =>\n                        !(trigger instanceof RegExp) && (\n                            <Trigger key={index} trigger={trigger} />\n                        )\n                )}\n            </div>\n            {hasRegExp && (\n                <RegexTriggerDisplay input={example} triggers={triggers} />\n            )}\n        </Segment>\n    ) : (\n        <Segment>\n            <Header as=\"h2\">No triggers set for this action</Header>\n        </Segment>\n    );\n};\n\nexport default TriggerInstruction;\n","import React, { useContext } from 'react';\nimport { InstructionsContext } from '../../../../services/InstructionsContext';\nimport { Segment, Header } from 'semantic-ui-react';\nimport { ActionInstruction } from '../../../../types/types';\nimport Instruction from '../Instruction';\nimport { Trigger } from '../../../../types/types';\nimport RegexTriggerDisplay from '../RegexTriggerDisplay';\n\nconst AlbumTriggersInstruction = ({\n    album,\n    description,\n    example,\n    hash,\n    triggers,\n}: {\n    album: string;\n    description?: string;\n    example?: string;\n    hash?: string;\n    triggers: Trigger[];\n}) => {\n    const { botName } = useContext(InstructionsContext);\n    const hasRegex = triggers.some((trigger) => trigger instanceof RegExp);\n\n    const stringChildren = triggers\n        .filter((trigger) => !(trigger instanceof RegExp))\n        .map((trigger, key) => (\n            <Segment key={key}>\n                <div>\n                    {botName} {trigger} {album}\n                </div>\n            </Segment>\n        ));\n\n    const text = `${album} ${description ? `- ${description}` : ''}`;\n\n    return (\n        <>\n            <Header as=\"h4\">\n                {hash ? (\n                    <a\n                        href={`https://imgur.com/a/${hash}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {text}\n                    </a>\n                ) : (\n                    text\n                )}\n            </Header>\n            {hasRegex && (\n                <RegexTriggerDisplay\n                    album={album}\n                    input={example}\n                    triggers={triggers}\n                />\n            )}\n            {stringChildren}\n        </>\n    );\n};\n\n//instruction for an action that deals with albums\nconst AlbumActionInstruction = ({\n    actionInstruction,\n}: {\n    actionInstruction: ActionInstruction;\n}) => {\n    const { albums } = useContext(InstructionsContext);\n\n    const { example, instructions, key, name, triggers } = actionInstruction;\n\n    const addChildren = !!albums.length\n        ? albums.map(({ album, description, hash }, key) => (\n              <AlbumTriggersInstruction\n                  key={key}\n                  album={album}\n                  hash={hash}\n                  description={description}\n                  example={example}\n                  triggers={triggers}\n              />\n          ))\n        : [\n              <AlbumTriggersInstruction\n                  key=\"placeholder\"\n                  album={'placeHolder'}\n                  description={\n                      'This bot has no active albums. This placeholder is here as an example'\n                  }\n                  example={example}\n                  triggers={triggers}\n              />,\n          ];\n\n    return (\n        <Instruction\n            addChildren={addChildren}\n            input={instructions || ''}\n            key={key}\n            name={name}\n        />\n    );\n};\n\nexport default AlbumActionInstruction;\n","import React, { useContext } from 'react';\nimport { Segment, Header } from 'semantic-ui-react';\nimport { InstructionsContext } from '../../../../services/InstructionsContext';\nimport TriggerInstruction from '../TriggerInstruction';\nimport Instruction from '../Instruction';\nimport AlbumActionInstruction from '../AlbumActionInstruction';\n\nconst ActionsInstructions = () => {\n    const { actions } = useContext(InstructionsContext);\n\n    const albumActions = actions.filter((action) => action.albums);\n    const notAlbumActions = actions.filter((action) => !action.albums);\n\n    return (\n        <Segment>\n            <Header as=\"h2\">Actions - click for description</Header>\n            {albumActions.map((actionInstruction) => (\n                <AlbumActionInstruction actionInstruction={actionInstruction} />\n            ))}\n            {notAlbumActions?.map(\n                ({ example, instructions, key, name, triggers }) => (\n                    <Instruction\n                        input={instructions || ''}\n                        key={key}\n                        name={name}\n                        addChildren={[\n                            <TriggerInstruction\n                                example={example}\n                                triggers={triggers}\n                            />,\n                        ]}\n                    />\n                )\n            )}\n        </Segment>\n    );\n};\n\nexport default ActionsInstructions;\n","export const regExpPrefix = '__REGEXP ';\n\nexport const reviver = (key: string, value: any, test?: boolean) => {\n    if (value.toString().indexOf(regExpPrefix) === 0) {\n        try {\n            var m = value.split(regExpPrefix)[1].match(/\\/(.*)\\/(.*)?/);\n            const regExp = new RegExp(m[1], m[2] || '');\n            return test ? true : regExp;\n        } catch (err) {\n            return test ? false : 'failedRegex';\n        }\n    } else return value;\n};\n","import React, { useEffect, useContext } from 'react';\nimport { Loader, Grid } from 'semantic-ui-react';\nimport { Container } from 'semantic-ui-react';\nimport Instruction from './components/Instruction';\nimport { InstructionsContext } from '../../services/InstructionsContext';\nimport User from '../User';\nimport Threads from './components/Threads';\nimport ActionsInstructions from './components/ActionsInstructions';\nimport { InstructionsActionTypes } from '../../types/types';\nimport { reviver } from '../../services/JSONParseRegExReviver';\nconst instructionsJson = require('../../instructions.json');\n\nconst Instructions = () => {\n    const { dispatch, actions, bot, general } = useContext(InstructionsContext);\n\n    useEffect(() => {\n        dispatch({\n            type: InstructionsActionTypes.setInstructions,\n            instructions: JSON.parse(JSON.stringify(instructionsJson), reviver),\n        });\n    }, [dispatch]);\n\n    if (!actions) return <Loader active />;\n\n    return (\n        <Grid>\n            <Grid.Column width={3}>{bot && <User {...bot} />}</Grid.Column>\n            <Grid.Column width={13}>\n                <Container>\n                    {general ? (\n                        <>\n                            <Instruction\n                                name=\"\"\n                                input={general}\n                                forceOpen={true}\n                            />\n                            <Threads />\n                            <ActionsInstructions />\n                        </>\n                    ) : (\n                        <Loader active />\n                    )}\n                </Container>\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default Instructions;\n","import React from 'react';\nimport './App.css';\nimport TopBar from './components/TopBar';\nimport { Container } from 'semantic-ui-react';\nimport Instructions from './components/Instructions';\nimport { InstructionsProvider } from './services/InstructionsContext';\n\nconst App = () => (\n    <InstructionsProvider>\n        <TopBar />\n        <Container text>\n            <Instructions />\n        </Container>\n    </InstructionsProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n//import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { hydrate, render } from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\nif (rootElement?.hasChildNodes()) {\n    hydrate(\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>,\n        rootElement\n    );\n} else {\n    render(\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>,\n        rootElement\n    );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}